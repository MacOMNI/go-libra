// +build js
// Code generated by protoc-gen-gopherjs. DO NOT EDIT.
// source: validator_change.proto

package pbtypes

import jspb "github.com/johanbrandhorst/protobuf/jspb"

// This is a compile-time assertion to ensure that this generated file
// is compatible with the jspb package it is being compiled against.
const _ = jspb.JspbPackageIsVersion2

// This is used to prove validator changes.
type ValidatorChangeProof struct {
	// A list of LedgerInfos with contiguous increasing epoch numbers.
	LedgerInfoWithSigs []*LedgerInfoWithSignatures
	// A flag (when true) that indicates the above list is incomplete and only
	// contains the first N epoch changes.
	More bool
}

// GetLedgerInfoWithSigs gets the LedgerInfoWithSigs of the ValidatorChangeProof.
func (m *ValidatorChangeProof) GetLedgerInfoWithSigs() (x []*LedgerInfoWithSignatures) {
	if m == nil {
		return x
	}
	return m.LedgerInfoWithSigs
}

// GetMore gets the More of the ValidatorChangeProof.
func (m *ValidatorChangeProof) GetMore() (x bool) {
	if m == nil {
		return x
	}
	return m.More
}

// MarshalToWriter marshals ValidatorChangeProof to the provided writer.
func (m *ValidatorChangeProof) MarshalToWriter(writer jspb.Writer) {
	if m == nil {
		return
	}

	for _, msg := range m.LedgerInfoWithSigs {
		writer.WriteMessage(1, func() {
			msg.MarshalToWriter(writer)
		})
	}

	if m.More {
		writer.WriteBool(2, m.More)
	}

	return
}

// Marshal marshals ValidatorChangeProof to a slice of bytes.
func (m *ValidatorChangeProof) Marshal() []byte {
	writer := jspb.NewWriter()
	m.MarshalToWriter(writer)
	return writer.GetResult()
}

// UnmarshalFromReader unmarshals a ValidatorChangeProof from the provided reader.
func (m *ValidatorChangeProof) UnmarshalFromReader(reader jspb.Reader) *ValidatorChangeProof {
	for reader.Next() {
		if m == nil {
			m = &ValidatorChangeProof{}
		}

		switch reader.GetFieldNumber() {
		case 1:
			reader.ReadMessage(func() {
				m.LedgerInfoWithSigs = append(m.LedgerInfoWithSigs, new(LedgerInfoWithSignatures).UnmarshalFromReader(reader))
			})
		case 2:
			m.More = reader.ReadBool()
		default:
			reader.SkipField()
		}
	}

	return m
}

// Unmarshal unmarshals a ValidatorChangeProof from a slice of bytes.
func (m *ValidatorChangeProof) Unmarshal(rawBytes []byte) (*ValidatorChangeProof, error) {
	reader := jspb.NewReader(rawBytes)

	m = m.UnmarshalFromReader(reader)

	if err := reader.Err(); err != nil {
		return nil, err
	}

	return m, nil
}
