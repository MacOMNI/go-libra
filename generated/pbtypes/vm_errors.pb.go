// +build !js
// Code generated by protoc-gen-go. DO NOT EDIT.
// source: vm_errors.proto

package pbtypes

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// The statuses and errors produced by the VM can be categorized into a
// couple different types:
// 1. Validation Statuses: all the errors that can (/should) be
//    the result of executing the prologue -- these are primarily used by
//    the vm validator and AC.
// 2. Verification Errors: errors that are the result of performing
//    bytecode verification (happens at the time of publishing).
// 3. VM Invariant Errors: errors that arise from an internal invariant of
//    the VM being violated. These signify a problem with either the VM or
//    bytecode verifier.
// 4. Binary Errors: errors that can occur during the process of
//    deserialization of a transaction.
// 5. Runtime Statuses: errors that can arise from the execution of a
//    transaction (assuming the prologue executes without error). These are
//    errors that can occur during execution due to things such as division
//    by zero, running out of gas, etc. These do not signify an issue with
//    the VM.
type VMStatus struct {
	// e.g. assertion violation, out of gas
	MajorStatus uint64 `protobuf:"varint,1,opt,name=major_status,json=majorStatus,proto3" json:"major_status,omitempty"`
	// Any substatus code. e.g. assertion error number
	HasSubStatus         bool     `protobuf:"varint,2,opt,name=has_sub_status,json=hasSubStatus,proto3" json:"has_sub_status,omitempty"`
	SubStatus            uint64   `protobuf:"varint,3,opt,name=sub_status,json=subStatus,proto3" json:"sub_status,omitempty"`
	HasMessage           bool     `protobuf:"varint,4,opt,name=has_message,json=hasMessage,proto3" json:"has_message,omitempty"`
	Message              string   `protobuf:"bytes,5,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VMStatus) Reset()         { *m = VMStatus{} }
func (m *VMStatus) String() string { return proto.CompactTextString(m) }
func (*VMStatus) ProtoMessage()    {}
func (*VMStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_5824ced5fb3a3c2c, []int{0}
}

func (m *VMStatus) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VMStatus.Unmarshal(m, b)
}
func (m *VMStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VMStatus.Marshal(b, m, deterministic)
}
func (m *VMStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VMStatus.Merge(m, src)
}
func (m *VMStatus) XXX_Size() int {
	return xxx_messageInfo_VMStatus.Size(m)
}
func (m *VMStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_VMStatus.DiscardUnknown(m)
}

var xxx_messageInfo_VMStatus proto.InternalMessageInfo

func (m *VMStatus) GetMajorStatus() uint64 {
	if m != nil {
		return m.MajorStatus
	}
	return 0
}

func (m *VMStatus) GetHasSubStatus() bool {
	if m != nil {
		return m.HasSubStatus
	}
	return false
}

func (m *VMStatus) GetSubStatus() uint64 {
	if m != nil {
		return m.SubStatus
	}
	return 0
}

func (m *VMStatus) GetHasMessage() bool {
	if m != nil {
		return m.HasMessage
	}
	return false
}

func (m *VMStatus) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func init() {
	proto.RegisterType((*VMStatus)(nil), "types.VMStatus")
}

func init() {
	proto.RegisterFile("vm_errors.proto", fileDescriptor_5824ced5fb3a3c2c)
}

var fileDescriptor_5824ced5fb3a3c2c = []byte{
	// 210 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x8f, 0x31, 0x4b, 0xc5, 0x30,
	0x14, 0x85, 0x89, 0xbe, 0xa7, 0xaf, 0xb7, 0x45, 0xa1, 0x53, 0x17, 0xb1, 0x8a, 0x43, 0x07, 0x6d,
	0x40, 0x07, 0x71, 0x75, 0xef, 0xd2, 0x82, 0x83, 0x4b, 0xb9, 0xd1, 0x4b, 0x52, 0x31, 0xa6, 0xe4,
	0x26, 0x82, 0x3f, 0xca, 0xff, 0x28, 0xc6, 0x56, 0xde, 0x78, 0xce, 0xf9, 0xf8, 0xe0, 0xc0, 0xe9,
	0xa7, 0x1d, 0xc9, 0x7b, 0xe7, 0xb9, 0x9d, 0xbd, 0x0b, 0xae, 0xdc, 0x86, 0xaf, 0x99, 0xf8, 0xf2,
	0x5b, 0xc0, 0xee, 0xa9, 0x1b, 0x02, 0x86, 0xc8, 0xe5, 0x05, 0x14, 0x16, 0xdf, 0x9c, 0x1f, 0x39,
	0xe5, 0x4a, 0xd4, 0xa2, 0xd9, 0xf4, 0x79, 0xea, 0x16, 0xe4, 0x0a, 0x4e, 0x0c, 0xf2, 0xc8, 0x51,
	0xad, 0xd0, 0x41, 0x2d, 0x9a, 0x5d, 0x5f, 0x18, 0xe4, 0x21, 0xaa, 0x85, 0x3a, 0x03, 0xd8, 0x23,
	0x0e, 0x93, 0x26, 0xe3, 0xff, 0xf9, 0x1c, 0xf2, 0x5f, 0x89, 0x25, 0x66, 0xd4, 0x54, 0x6d, 0x92,
	0x01, 0x0c, 0x72, 0xf7, 0xd7, 0x94, 0x15, 0x1c, 0xaf, 0xe3, 0xb6, 0x16, 0x4d, 0xd6, 0xaf, 0xf1,
	0xb1, 0x7d, 0xbe, 0xd6, 0x53, 0x30, 0x51, 0xb5, 0x2f, 0xce, 0xca, 0x60, 0xe8, 0xfe, 0xf6, 0x41,
	0x6a, 0x77, 0xf3, 0x3e, 0x29, 0x8f, 0x52, 0xd3, 0x07, 0x79, 0x0c, 0xf4, 0x2a, 0x67, 0x95, 0xfe,
	0xa9, 0xa3, 0xf4, 0xf6, 0xee, 0x27, 0x00, 0x00, 0xff, 0xff, 0x62, 0xac, 0xf9, 0xfb, 0x00, 0x01,
	0x00, 0x00,
}
