// +build js
// Code generated by protoc-gen-gopherjs. DO NOT EDIT.
// source: mempool_status.proto

package pbtypes

import jspb "github.com/johanbrandhorst/protobuf/jspb"

// This is a compile-time assertion to ensure that this generated file
// is compatible with the jspb package it is being compiled against.
const _ = jspb.JspbPackageIsVersion2

// The statuses and errors produced by the Mempool during transaction insertion
type MempoolStatus struct {
	// e.g. assertion violation
	Code    uint64
	Message string
}

// GetCode gets the Code of the MempoolStatus.
func (m *MempoolStatus) GetCode() (x uint64) {
	if m == nil {
		return x
	}
	return m.Code
}

// GetMessage gets the Message of the MempoolStatus.
func (m *MempoolStatus) GetMessage() (x string) {
	if m == nil {
		return x
	}
	return m.Message
}

// MarshalToWriter marshals MempoolStatus to the provided writer.
func (m *MempoolStatus) MarshalToWriter(writer jspb.Writer) {
	if m == nil {
		return
	}

	if m.Code != 0 {
		writer.WriteUint64(1, m.Code)
	}

	if len(m.Message) > 0 {
		writer.WriteString(5, m.Message)
	}

	return
}

// Marshal marshals MempoolStatus to a slice of bytes.
func (m *MempoolStatus) Marshal() []byte {
	writer := jspb.NewWriter()
	m.MarshalToWriter(writer)
	return writer.GetResult()
}

// UnmarshalFromReader unmarshals a MempoolStatus from the provided reader.
func (m *MempoolStatus) UnmarshalFromReader(reader jspb.Reader) *MempoolStatus {
	for reader.Next() {
		if m == nil {
			m = &MempoolStatus{}
		}

		switch reader.GetFieldNumber() {
		case 1:
			m.Code = reader.ReadUint64()
		case 5:
			m.Message = reader.ReadString()
		default:
			reader.SkipField()
		}
	}

	return m
}

// Unmarshal unmarshals a MempoolStatus from a slice of bytes.
func (m *MempoolStatus) Unmarshal(rawBytes []byte) (*MempoolStatus, error) {
	reader := jspb.NewReader(rawBytes)

	m = m.UnmarshalFromReader(reader)

	if err := reader.Err(); err != nil {
		return nil, err
	}

	return m, nil
}
